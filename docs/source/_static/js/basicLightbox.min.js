/**
 * UMD (Universal Module Definition) Wrapper
 * This initial part of the code is a standard pattern that allows the library to work
 * in different JavaScript environments (like in a browser via a <script> tag,
 * with module loaders like RequireJS (AMD), or in Node.js (CommonJS)).
 */
(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports, like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window).
        root.basicLightbox = factory();
    }
}(typeof self !== 'undefined' ? self : this, function() {

    // === CORE LOGIC STARTS HERE ===

    /**
     * Checks if a lightbox instance is currently visible in the DOM.
     * @returns {boolean}
     */
    const visible = () => {
        return document.querySelector('.basicLightbox') != null;
    };

    /**
     * The main factory function. This is the core API that we call.
     * It creates a lightbox instance but doesn't show it yet.
     * @param {string|Node} content - The content to show inside the lightbox (for us, an <img> tag as a string).
     * @param {Object} opts - Optional configuration settings.
     * @returns {Object} An object with methods to control the lightbox (show, close, etc.).
     */
    const create = (content, opts) => {

        // Set default options and merge them with any user-provided options.
        const options = Object.assign({}, {
            closable: true,      // If true, the lightbox can be closed by clicking the background.
            className: '',       // Optional custom CSS class to add to the lightbox.
            onShow: () => {},    // A function to run when the lightbox is shown.
            onClose: () => {}    // A function to run when the lightbox is closed.
        }, opts);

        // 1. Create the HTML structure for the lightbox from a string.
        const elem = document.createElement('div');
        elem.innerHTML = `
            <div class="basicLightbox ${options.className}">
                <div class="basicLightbox__placeholder" role="dialog">
                    ${typeof content === 'string' ? content : ''}
                </div>
            </div>
        `;
        const instance = elem.firstElementChild;

        // If the provided content is a DOM node (not a string), append it to the placeholder.
        if (typeof content !== 'string') {
            instance.querySelector('.basicLightbox__placeholder').appendChild(content);
        }

        // 2. Implement the close functionality.
        const close = () => {
            // Trigger the onClose callback function.
            options.onClose(instance);
            
            // Start the fade-out animation by removing the 'visible' class.
            instance.classList.remove('basicLightbox--visible');
            
            // After the animation finishes (410ms), remove the element from the DOM completely.
            setTimeout(() => {
                if (visible()) {
                    instance.parentElement.removeChild(instance);
                }
            }, 410); // 410ms should match the CSS transition duration.
        };
        
        // If the lightbox is 'closable', add a click event listener to the background overlay.
        if (options.closable) {
            instance.addEventListener('click', (e) => {
                // Only close if the click is on the background itself, not on the content inside it.
                if (e.target === instance) {
                    close();
                }
            });
        }

        // 3. Return an 'instance object' with public methods to control this lightbox.
        return {
            element: () => instance,
            
            visible: visible,
            
            /**
             * Method to show the lightbox.
             * @param {Function} cb - An optional callback function to execute when the show animation is complete.
             */
            show: (cb) => {
                // Trigger the onShow callback function.
                options.onShow(instance);
                
                // Add the lightbox element to the page's body.
                document.body.appendChild(instance);
                
                // Wait a tiny moment before adding the 'visible' class.
                // This ensures the browser renders the element first, allowing the CSS fade-in animation to work.
                setTimeout(() => {
                    requestAnimationFrame(() => { // Ensures the animation is smooth.
                        instance.classList.add('basicLightbox--visible');
                        if (typeof cb === 'function') cb();
                    });
                }, 10);
            },
            
            /**
             * Method to close the lightbox.
             * @param {Function} cb - An optional callback function to execute when the close animation is complete.
             */
            close: (cb) => {
                close();
                if (typeof cb === 'function') cb();
            }
        };
    };

    // Expose the public API.
    // This makes `basicLightbox.create()` and `basicLightbox.visible()` available globally.
    return {
        create,
        visible
    };
}));